---
title: "Sección 2"
subtitle: "Markdown básico"
format: html
editor: visual
---

# Introducción a la sección

En esta sección exploraremos los conceptos básicos de Markdown. Las lecciones de esta sección son las siguientes:

-   Sintaxis básica: encabezados, formato de texto y código fuente.

-   Elementos visuales en Markdown: listas, enlaces, imágenes, gráficos, tablas y vídeos.

-   Ecuaciones: incluyendo ecuaciones en línea y estilo de ecuación en bloque.

## Sintaxis básica

En esta subsección exploraremos las formas de modificar nuestro texto y código.

Los encabezados se especifican con signos de numeral. El título "Sección 2" es un encabezado de nivel 1. Sin embargo, el título "Sintaxis básica" es un encabezado de nivel 2. Ahora generaremos encabezados de nivel 3.

### Formato de texto

El formato de texto se puede realizar utilizando el formato de Markdown en el editor de origen y visual. Sin embargo, el editor visual ofrece más opciones de formato.

-   **Texto en negrita**: utilizando **doble** **asterisco**.

-   *Texto en cursiva*: utilizando un solo *asterisco*.

-   ***Texto en negrita y cursiva***: utilizando triple asterisco.

-   Tach~~ado~~: se puede hacer utilizando doble tilde ~~alrededor~~ del texto (símbolo \~).

-   Super^índice^: podemos usar el acento circunflejo alrededor del texto en superíndice.

-   Sub~índice~: esto se puede hacer utilizando un solo tilde alrededor del texto.

-   Smallcaps: para smallcaps utilizamos lo que se llama un [selector]{.smallcaps} de clase CSS. Cubriremos los selectores de clase en secciones futuras.

### Código fuente

El código fuente se escribe con el siguiente formato:

```{r}
x <- sample(1:50, 1)

y <- sample(1:50, 1)
```

Este bloque de código se llama fragmento de código. Entre llaves especificamos el lenguaje que utilizamos, en este caso R. Podemos proporcionar un nombre al fragmento:

```{r FuncionSuma}
sum2 <- function(a, b) { 
  mysum <- a + b 
  return(mysum) 
}
```

También podemos crear código en línea, de modo que podamos especificar nuestros resultados en función del código que escribamos. Por lo tanto, la suma de x e y es `r sum2(x, y)`. Para ello, utilizamos la función sum2.

Finalmente, podemos crear código con sintaxis, pero no se evaluará si no especificamos el lenguaje entre llaves.

```         
x <- 22 

y <- 9000
```

``` r
x <- 22 
y <- 9000 
sum2(x, y)
```

```{r}
sum2(x, y)
```

Una práctica muy buena es crear los fragmentos de código utilizando el atajo de teclado CTRL + ALT + I.
